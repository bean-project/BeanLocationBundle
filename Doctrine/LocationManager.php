<?php
namespace Bean\Bundle\LocationBundle\Doctrine;

use Bean\Bundle\LocationBundle\Model\Geolocation;
use Bean\Bundle\LocationBundle\Model\LocationManager as BaseLocationManager; // skip classes like CoreBundle\Model\BaseEntityManager
use Doctrine\Common\Persistence\ObjectManager;
use Doctrine\Common\Persistence\ObjectRepository;

class LocationManager extends BaseLocationManager
{
    /**
     * @param Geolocation $entity
     * @param bool $andFlush
     */
    public function save($entity, $andFlush = true)
    {
        if (!empty($entity->getPlaceId())) {
            $loc = $this->findOneBy(['placeId' => $entity->getPlaceId()]);
        }
        if (empty($loc)) {
            if ($entity->getCountry() === 'SG') {
                $entity->setFirstDivision('Singapore');
            }
            $loc = $entity;
        }
        parent::save($loc, $andFlush); // TODO: Change the autogenerated stub
        return $loc;
    }

    public function isCountry($code)
    {
        if (is_array($code)) {
            return false; // not supported yet
        }
        $countryByFirstDivision = $this->getCountryByFirstDivision($code);
        if (empty($countryByFirstDivision)) {
            return false;
        }
        return true;
    }

    public function getCountryByCode($code)
    {
        $countryByFirstDivision = $this->getCountryByFirstDivision($code);
        if (empty($countryByFirstDivision)) {
            $geocountry = strtoupper($code);
        } else {
            $geocountry = $countryByFirstDivision;
        }
        return $geocountry;
    }

    public function getCountryByFirstDivision($firstDivision, $alias = 'object')
    {
        $query = $this->getCountriesQB()->andWhere($alias . '.firstDivision LIKE :first_division')->setParameter('first_division', $firstDivision)->getQuery();
        $result = $query->setMaxResults(1)->setFirstResult(0)->getOneOrNullResult();
        if (empty($result)) {
            return null;
        } else {
            return $result['country'];
        }
    }

    public function getCountries()
    {
        $query = $this->getCountriesQB()->getQuery();
        return $query->getResult();
    }

    public function getCountriesQB($alias = 'object')
    {
        return $this->getRepository()
            ->createQueryBuilder($alias)
            ->select('distinct(' . $alias . '.country) as country');
    }

    public function getFirstDivisionsQB($country, $alias = 'object')
    {
        return $this->getRepository()
            ->createQueryBuilder($alias)
            ->select('distinct(' . $alias . '.firstDivision) as first_division')->where($alias . '.country LIKE :country')->setParameter('country', $country);
    }

    public function getFirstDivisions($country)
    {
        $query = $this->getFirstDivisionsQB($country)->getQuery();
        return $query->getResult();
    }


    /**
     * {@inheritdoc}
     */
    public function getConnection()
    {
        return $this->getObjectManager()->getConnection();
    }


    /**
     * {@inheritdoc}
     */
    public function getPager(array $criteria, $page, $limit = 10, array $sort = array())
    {
        $query = $this->getRepository()
            ->createQueryBuilder('m')
            ->select('m');
        $fields = $this->getEntityManager()->getClassMetadata($this->class)->getFieldNames();
        foreach ($sort as $field => $direction) {
            if (!in_array($field, $fields)) {
                throw new \RuntimeException(sprintf("Invalid sort field '%s' in '%s' class", $field, $this->class));
            }
        }
        foreach ($sort as $field => $direction) {
            $query->orderBy(sprintf('m.%s', $field), strtoupper($direction));
        }
        $parameters = array();
        if (isset($criteria['enabled'])) {
            $query->andWhere('m.enabled = :enabled');
            $parameters['enabled'] = $criteria['enabled'];
        }
        $query->setParameters($parameters);
        $pager = new Pager();
        $pager->setMaxPerPage($limit);
        $pager->setQuery(new ProxyQuery($query));
        $pager->setPage($page);
        $pager->init();
        return $pager;
    }
}